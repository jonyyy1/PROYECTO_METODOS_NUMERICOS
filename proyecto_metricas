T = 0.05;        % Periodo de muestreo [s]
tau = T/2;      % Retardo de transporte [s]
t_sim = 10;     % Tiempo de simulación [s]

%% 1. Generar entrada de control (trayectoria espiral) en instantes de muestreo
t_samples = 0:T:t_sim;
u1_samples = 0.5 + 0.05*t_samples;    % Velocidad lineal creciente [m/s]
u2_samples = 0.7 * ones(size(t_samples)); % Velocidad angular constante [rad/s]

% Crear funciones de interpolación para las entradas
u1_fun = @(t) interp1(t_samples, u1_samples, t, 'previous', 0);
u2_fun = @(t) interp1(t_samples, u2_samples, t, 'previous', 0);

%% 2. Simular modelos
% Modelo de referencia (dde23 - solución "analítica")
[t_ref, x_ref] = simulate_dde23(u1_fun, u2_fun, tau, t_sim, T);

% Modelo Euler discreto (método visto en clase)
x_euler = simulate_euler(u1_samples, u2_samples, T, tau, t_samples);

% Modelo Runge-Kutta 4 discreto (método visto en clase)
[~, x_rk4] = simulate_rk4(u1_fun, u2_fun, tau, t_sim, T);

% Modelo exacto discreto (método investigado)
x_exact = simulate_exact(u1_samples, u2_samples, T, tau, t_samples);

%% 3. Calcular errores contra referencia dde23
N = min([length(t_samples), size(x_ref,2), size(x_euler,2), size(x_rk4,2), size(x_exact,2)]);
t_compare = t_samples(1:N);
x_ref_compare = x_ref(:,1:N);
x_euler_compare = x_euler(:,1:N);
x_rk4_compare = x_rk4(:,1:N);
x_exact_compare = x_exact(:,1:N);

% Error absoluto en posición (norma euclidiana en el plano xy)
err_euler = sqrt((x_euler_compare(1,:) - x_ref_compare(1,:)).^2 + ...
                 (x_euler_compare(2,:) - x_ref_compare(2,:)).^2);
err_rk4 = sqrt((x_rk4_compare(1,:) - x_ref_compare(1,:)).^2 + ...
               (x_rk4_compare(2,:) - x_ref_compare(2,:)).^2);
err_exact = sqrt((x_exact_compare(1,:) - x_ref_compare(1,:)).^2 + ...
                 (x_exact_compare(2,:) - x_ref_compare(2,:)).^2);

% Métricas
MAE_euler = mean(err_euler);
MAE_rk4 = mean(err_rk4);
MAE_exact = mean(err_exact);
MaxErr_euler = max(err_euler);
MaxErr_rk4 = max(err_rk4);
MaxErr_exact = max(err_exact);

%% 4. Visualización
figure('Position', [100, 100, 1200, 800]);

% Subplot 1: Trayectorias
h1 = subplot(2,2,1);
plot(x_ref_compare(1,:), x_ref_compare(2,:), 'k-', 'LineWidth', 2); hold on;
plot(x_euler_compare(1,:), x_euler_compare(2,:), 'r--', 'LineWidth', 1.5);
plot(x_rk4_compare(1,:), x_rk4_compare(2,:), 'm-.', 'LineWidth', 1.5);
plot(x_exact_compare(1,:), x_exact_compare(2,:), 'b-', 'LineWidth', 1.5);
title(['Trayectorias (T=', num2str(T), 's, \tau=', num2str(tau), 's)']);
xlabel('x_1 [m]'); ylabel('x_2 [m]'); grid on;
legend('Referencia (dde23)', 'Euler', 'RK4', 'Exacto', 'Location', 'northwest');
axis equal;

% Subplot 2: Evolución de errores absolutos
h2 = subplot(2,2,2);
plot(t_compare, err_euler, 'r-', 'LineWidth', 1.5); hold on;
plot(t_compare, err_rk4, 'm-', 'LineWidth', 1.5);
plot(t_compare, err_exact, 'b-', 'LineWidth', 1.5);
yline(MAE_euler, 'r--', 'LineWidth', 1.2);
yline(MAE_rk4, 'm--', 'LineWidth', 1.2);
yline(MAE_exact, 'b--', 'LineWidth', 1.2);
title('Error Absoluto de Posición (vs Referencia)');
xlabel('Tiempo [s]'); ylabel('Error [m]'); grid on;
legend(['Euler (MAE=', num2str(MAE_euler, '%.3f'), 'm)'], ...
       ['RK4 (MAE=', num2str(MAE_rk4, '%.3f'), 'm)'], ...
       ['Exacto (MAE=', num2str(MAE_exact, '%.3f'), 'm)'], ...
       'Location', 'northwest');
ylim([0, max([err_euler, err_rk4, err_exact])*1.1]);

% Subplot 3: Componentes de posición X1
h3 = subplot(2,2,3);
plot(t_compare, x_ref_compare(1,:), 'k-', 'LineWidth', 2); hold on;
plot(t_compare, x_euler_compare(1,:), 'r--', 'LineWidth', 1.5);
plot(t_compare, x_rk4_compare(1,:), 'm-.', 'LineWidth', 1.5);
plot(t_compare, x_exact_compare(1,:), 'b-', 'LineWidth', 1.5);
title('Posición en X1');
xlabel('Tiempo [s]'); ylabel('x_1 [m]'); grid on;
legend('Referencia', 'Euler', 'RK4', 'Exacto', 'Location', 'northwest');

% Subplot 4: Orientación (x3)
h4 = subplot(2,2,4);
plot(t_compare, x_ref_compare(3,:), 'k-', 'LineWidth', 2); hold on;
plot(t_compare, x_euler_compare(3,:), 'r--', 'LineWidth', 1.5);
plot(t_compare, x_rk4_compare(3,:), 'm-.', 'LineWidth', 1.5);
plot(t_compare, x_exact_compare(3,:), 'b-', 'LineWidth', 1.5);
title('Orientación (x_3)');
xlabel('Tiempo [s]'); ylabel('Ángulo [rad]'); grid on;
legend('Referencia', 'Euler', 'RK4', 'Exacto', 'Location', 'northwest');

%% ---- Exportar cada panel como PDF vectorial --------------------------
exportgraphics(h1,'trayectorias.pdf', 'ContentType','vector');
exportgraphics(h2,'errores.pdf',      'ContentType','vector');
exportgraphics(h3,'x1.pdf',           'ContentType','vector');
exportgraphics(h4,'orientacion.pdf',  'ContentType','vector');

% (opcional) figura combinada en PNG para referencia rápida
exportgraphics(gcf,'comparacion_modelos.png','Resolution',300);



%% 5. Mostrar métricas en consola
fprintf('=== RESULTADOS (T=%.2fs, τ=%.2fs) ===\n', T, tau);
fprintf('Modelo Euler:  MAE = %.4f m, Error Máx = %.4f m\n', MAE_euler, MaxErr_euler);
fprintf('Modelo RK4:    MAE = %.4f m, Error Máx = %.4f m\n', MAE_rk4, MaxErr_rk4);
fprintf('Modelo Exacto: MAE = %.4f m, Error Máx = %.4f m\n', MAE_exact, MaxErr_exact);
fprintf('Mejora Exacto vs Euler: %.1f%% en MAE\n', (1 - MAE_exact/MAE_euler)*100);
fprintf('Mejora Exacto vs RK4:   %.1f%% en MAE\n', (1 - MAE_exact/MAE_rk4)*100);

%% ------------------------------------------------------------------------
% FUNCIONES DE SIMULACIÓN 
% Modelo de Referencia con dde23
function [t, x] = simulate_dde23(u1_fun, u2_fun, tau, sim_time, T)
    % Función DDE: t: tiempo actual, x: estado actual, Z: estado en t-tau
    ddefun = @(t, x, Z) [
        u1_fun(t - tau) * cos(x(3));   % dx1/dt = u1(t-tau)*cos(x3(t))
        u1_fun(t - tau) * sin(x(3));   % dx2/dt = u1(t-tau)*sin(x3(t))
        u2_fun(t - tau)                % dx3/dt = u2(t-tau)
    ];
    
    % Retardo constante
    lags = tau;
    
    % Condición inicial (t<0)
    history = [0; 0; 0]; % [x1(0); x2(0); x3(0)]
    
    % Opciones: aumentar tolerancias para mayor precisión
    options = ddeset('RelTol',1e-5, 'AbsTol',1e-8);
    
    % Resolver DDE
    sol = dde23(ddefun, lags, history, [0, sim_time], options);
    
    % Evaluar en los instantes de muestreo (T)
    t = 0:T:sim_time;
    x = deval(sol, t);
end

% Modelo Euler Discreto (con retardo tau)
function x = simulate_euler(u1, u2, T, tau, t)
    % Inicializar estados (x1, x2, x3)
    x = zeros(3, length(t));
    
    % Calcular número de pasos de retardo
    delay_steps = round(tau/T);
    
    % Simulación paso a paso
    for k = 1:length(t)-1
        % Obtener entrada retardada
        if k > delay_steps
            u1_delayed = u1(k - delay_steps);
            u2_delayed = u2(k - delay_steps);
        else
            u1_delayed = 0;
            u2_delayed = 0;
        end
        
        % Derivadas (modelo continuo evaluado en el instante k)
        dx1 = u1_delayed * cos(x(3,k));
        dx2 = u1_delayed * sin(x(3,k));
        dx3 = u2_delayed;
        
        % Actualización Euler
        x(:,k+1) = x(:,k) + T * [dx1; dx2; dx3];
    end
end

% Modelo Runge-Kutta 4 (paso fijo T)
function [t, x] = simulate_rk4(u1_fun, u2_fun, tau, sim_time, T)
    % Inicialización
    t = 0:T:sim_time;
    n = length(t);
    x = zeros(3, n);
    x(:,1) = [0; 0; 0];  % Condición inicial
    
    % Función del sistema con retardo en entradas
    f = @(t, x) [
        u1_fun(t - tau) * cos(x(3));
        u1_fun(t - tau) * sin(x(3));
        u2_fun(t - tau)
    ];
    
    % RK4
    for k = 1:n-1
        h = T;
        k1 = f(t(k), x(:,k));
        k2 = f(t(k) + h/2, x(:,k) + (h/2)*k1);
        k3 = f(t(k) + h/2, x(:,k) + (h/2)*k2);
        k4 = f(t(k) + h, x(:,k) + h*k3);
        
        x(:,k+1) = x(:,k) + (h/6)*(k1 + 2*k2 + 2*k3 + k4);
    end
end

% Modelo Exacto Discreto (con retardo tau) - Según paper
function x = simulate_exact(u1, u2, T, tau, t)
    x = zeros(3, length(t));
    delay_steps = round(tau/T);  % Pasos de retardo
    
    for k = 1:length(t)-1
        % 1. Obtener entrada retardada (u(t - τ))
        if k > delay_steps
            u1_delayed = u1(k - delay_steps);
            u2_delayed = u2(k - delay_steps);
        else
            u1_delayed = 0;
            u2_delayed = 0;
        end
        
        % 2. Entrada ACTUAL (u(kT)) 
        u1_current = u1(k);
        u2_current = u2(k);

        % 3. Actualizar orientación
        x(3,k+1) = x(3,k) + tau * u2_delayed + (T - tau) * u2_current;
        
        % 4. Calcular funciones psi
        psi1 = aux_psi(u2_delayed, tau);
        psi2 = aux_psi(u2_current, T - tau);
        
        % 5. Calcular ángulos
        theta1 = x(3,k) + (tau/2) * u2_delayed;
        theta2 = x(3,k) + (tau/2) * u2_delayed + ((T - tau)/2) * u2_current;
        
        % 6. Actualizar posición
        x(1,k+1) = x(1,k) + 2 * psi1 * u1_delayed * cos(theta1) + ...
                    2 * psi2 * u1_current * cos(theta2);
        x(2,k+1) = x(2,k) + 2 * psi1 * u1_delayed * sin(theta1) + ...
                    2 * psi2 * u1_current * sin(theta2);
    end
end

% Función auxiliar psi
function psi = aux_psi(u2, delta)
    if abs(u2) < 1e-10
        psi = delta/2;
    else
        psi = sin(delta/2 * u2) / u2;
    end
end
